{"version":3,"sources":["components/Header.jsx","components/Banner.jsx","components/NewTweetForm.jsx","util/date.js","components/Avatar.jsx","components/EditTweetForm.jsx","components/TweetCard.jsx","pages/Login.jsx","context/AuthContext.jsx","components/Tweets.jsx","pages/AllTweets.jsx","pages/MyTweets.jsx","App.jsx","service/auth.js","service/tweet.js","network/http.js","db/token.js","network/socket.js","index.js"],"names":["Header","memo","username","onLogout","onMyTweets","onAllTweets","className","src","alt","onClick","Banner","text","isAlert","NewTweetForm","tweetService","onError","user","useState","tweet","setTweet","onSubmit","event","a","preventDefault","postTweet","userId","then","catch","type","placeholder","value","required","autoFocus","onChange","target","parseDate","tdate","created","Date","parse","now","diff","Math","floor","round","month","toLocaleDateString","getDate","Avatar","url","name","charAt","EditTweetForm","onClose","setText","updateTweet","id","TweetCard","owner","onUsernameClick","createdAt","editing","setEditing","deleteTweet","Login","onSignUp","onLogin","signup","setSignup","setUsername","password","setPassword","setName","email","setEmail","setURL","setIsAlert","setError","error","toString","checked","htmlFor","AuthContext","createContext","contextRef","createRef","AuthProvider","authService","authErrorEventBus","children","undefined","setUser","useImperativeHandle","token","useEffect","listen","err","console","log","me","signUp","useCallback","logIn","login","logout","context","useMemo","Provider","AuthErrorEventBus","callback","this","useAuth","useContext","Tweets","addable","tweets","setTweets","history","useHistory","getTweets","stopSync","onSync","socket","command","onCreated","data","onUpdate","onDelete","tweetId","filter","item","updated","map","push","setTimeout","transient","length","AllTweets","MyTweets","useParams","App","window","confirm","exact","path","AuthService","http","tokenStorage","fetch","method","body","JSON","stringify","saveToken","getToken","headers","Authorization","clearToken","TweetService","query","getHeaders","HttpClient","baseURL","options","response","json","status","message","Error","notify","TOKEN","TokenStorage","localStorage","getItem","setItem","clear","Socket","getAccessToken","io","auth","on","connected","connect","off","process","httpClient","socketClient","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.538bd45f.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nconst Header = memo(({ username, onLogout, onMyTweets, onAllTweets }) => {\n  return (\n    <header className='header'>\n      <div className='logo'>\n        <img src='./img/logo.png' alt='Dwitter Logo' className='logo-img' />\n        <h1 className='logo-name'>Dwitter</h1>\n        {username && <span className='logo-user'>@{username}</span>}\n      </div>\n      {username && (\n        <nav className='menu'>\n          <button onClick={onAllTweets}>All Tweets</button>\n          <button onClick={onMyTweets}>My Tweets</button>\n          <button className='menu-item' onClick={onLogout}>\n            Logout\n          </button>\n        </nav>\n      )}\n    </header>\n  );\n});\n\nexport default Header;\n","import React, { memo } from 'react';\n\nconst Banner = memo(({ text, isAlert }) => (\n  <>\n    {text && (\n      <p className={`banner ${isAlert ? 'banner-red' : 'banner-green'}`}>\n        {text}\n      </p>\n    )}\n  </>\n));\nexport default Banner;\n","import React, { useState } from 'react';\n\nconst NewTweetForm = ({ tweetService, onError, user }) => {\n  const [tweet, setTweet] = useState('');\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    tweetService\n      .postTweet(tweet, user.userId)\n      .then(() => {\n        setTweet('');\n        // onCreated(created); ----> socket 으로 연결하여서 새로운 tweet이 생길때 자동으로 실시간 업뎃으로 추가되는 기능 추가되서 필요 없음\n      })\n      .catch(onError);\n  };\n\n  const onChange = (event) => {\n    setTweet(event.target.value);\n  };\n\n  return (\n    <form className='tweet-form' onSubmit={onSubmit}>\n      <input\n        type='text'\n        placeholder='Edit your tweet'\n        value={tweet}\n        required\n        autoFocus\n        onChange={onChange}\n        className='form-input tweet-input'\n      />\n      <button type='submit' className='form-btn'>\n        Post\n      </button>\n    </form>\n  );\n};\n\nexport default NewTweetForm;\n","export default function parseDate(tdate) {\n  const created = new Date(Date.parse(tdate));\n  const now = new Date();\n  const diff = Math.floor((now - created) / 1000);\n  if (diff <= 1) {\n    return 'just now';\n  }\n  if (diff < 20) {\n    return diff + ' seconds ago';\n  }\n  if (diff < 40) {\n    return 'half a minute ago';\n  }\n  if (diff < 60) {\n    return 'less than a minute ago';\n  }\n  if (diff <= 90) {\n    return 'one minute ago';\n  }\n  if (diff <= 3540) {\n    return Math.round(diff / 60) + ' minutes ago';\n  }\n  if (diff <= 5400) {\n    return '1 hour ago';\n  }\n  if (diff <= 86400) {\n    return Math.round(diff / 3600) + ' hours ago';\n  }\n  if (diff <= 129600) {\n    return '1 day ago';\n  }\n  if (diff < 604800) {\n    return Math.round(diff / 86400) + ' days ago';\n  }\n  if (diff <= 777600) {\n    return '1 week ago';\n  }\n  const month = created.toLocaleDateString('default', { month: 'long' });\n  return `on ${month} ${created.getDate()}`;\n}\n","import React, { memo } from 'react';\n\nconst Avatar = memo(({ url, name }) => (\n  <div>\n    {!!url ? (\n      <img src={url} alt='avatar' className='avatar-img' />\n    ) : (\n      <div className='avatar-txt'>{name.charAt(0)}</div>\n    )}\n  </div>\n));\n\nexport default Avatar;\n","import React, { useState } from 'react';\n\nconst EditTweetForm = ({ tweet, tweetService, onClose }) => {\n  const [text, setText] = useState(tweet.text);\n  \n  const onSubmit = async (event) => {\n    event.preventDefault();\n    tweetService.updateTweet(tweet.id, text)\n    onClose();\n  };\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <form className='edit-tweet-form' onSubmit={onSubmit}>\n      <input\n        type='text'\n        placeholder='Edit your tweet'\n        value={text}\n        required\n        autoFocus\n        onChange={onChange}\n        className='form-input tweet-input'\n      />\n      <div className='edit-tweet-form-action'>\n        <button type='submit' className='form-btn-update'>\n          Update\n        </button>\n        <button type='button' className='form-btn-cancel' onClick={onClose}>\n          Cancel\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default EditTweetForm;\n","import React, { memo, useState } from 'react';\nimport parseDate from '../util/date';\nimport Avatar from './Avatar';\nimport EditTweetForm from './EditTweetForm';\n\nconst TweetCard = memo(\n  ({ tweet, owner, tweetService, onUsernameClick }) => {\n    const { id, username, name, url, text, createdAt } = tweet;\n    const [editing, setEditing] = useState(false);\n    const onClose = () => setEditing(false);\n\n    return (\n      <li className='tweet'>\n        <section className='tweet-container'>\n          <Avatar url={url} name={name} />\n          <div className='tweet-body'>\n            <span className='tweet-name'>{name}</span>\n            <span\n              className='tweet-username'\n              onClick={() => onUsernameClick(tweet)}\n            >\n              @{username}\n            </span>\n            <span className='tweet-date'> · {parseDate(createdAt)}</span>\n            <p>{text}</p>\n            {editing && (\n              <EditTweetForm\n                tweet={tweet}\n                tweetService={tweetService}\n                onClose={onClose}\n              />\n            )}\n          </div>\n        </section>\n        {owner && (\n          <div className='tweet-action'>\n            <button className='tweet-action-btn' onClick={() => tweetService.deleteTweet(id)}>\n              x\n            </button>\n            <button\n              className='tweet-action-btn'\n              onClick={() => setEditing(true)}\n            >\n              ✎\n            </button>\n          </div>\n        )}\n      </li>\n    );\n  }\n);\nexport default TweetCard;\n","import React, { useState } from 'react';\nimport Banner from '../components/Banner';\n\nconst Login = ({ onSignUp, onLogin }) => {\n  const [signup, setSignup] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [url, setURL] = useState('');\n  const [text, setText] = useState('');\n  const [isAlert, setIsAlert] = useState(false);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (signup) {\n      onSignUp(username, password, name, email, url).catch(setError);\n    } else {\n      onLogin(username, password).catch(setError);\n    }\n  };\n\n  const setError = (error) => {\n    setText(error.toString());\n    setIsAlert(true);\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { name, value, checked },\n    } = event;\n    switch (name) {\n      case 'username':\n        return setUsername(value);\n      case 'password':\n        return setPassword(value);\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'url':\n        return setURL(value);\n      case 'signup':\n        return setSignup(checked);\n      default:\n    }\n  };\n\n  return (\n    <>\n      <Banner text={text} isAlert={isAlert} />\n      <form className='auth-form' onSubmit={onSubmit}>\n        <input\n          name='username'\n          type='text'\n          placeholder='Id'\n          value={username}\n          onChange={onChange}\n          className='form-input'\n          required\n        />\n        <input\n          name='password'\n          type='password'\n          placeholder='Password'\n          value={password}\n          className='form-input'\n          onChange={onChange}\n        />\n        {signup && (\n          <input\n            name='name'\n            type='text'\n            placeholder='Name'\n            value={name}\n            onChange={onChange}\n            className='form-input'\n            required\n          />\n        )}\n        {signup && (\n          <input\n            name='email'\n            type='email'\n            placeholder='Email'\n            value={email}\n            onChange={onChange}\n            className='form-input'\n            required\n          />\n        )}\n        {signup && (\n          <input\n            name='url'\n            type='url'\n            placeholder='Profile Image URL'\n            value={url}\n            onChange={onChange}\n            className='form-input'\n          />\n        )}\n        <div className='form-signup'>\n          <input\n            name='signup'\n            id='signup'\n            type='checkbox'\n            onChange={onChange}\n            checked={signup}\n          />\n          <label htmlFor='signup'> Create a new account?</label>\n        </div>\n        <button className='form-btn auth-form-btn' type='submit'>\n          {signup ? 'Sign Up' : 'Sign In'}\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n","import {\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport Header from '../components/Header';\nimport Login from '../pages/Login';\n\nconst AuthContext = createContext({});\n\nconst contextRef = createRef();\n\nexport function AuthProvider({ authService, authErrorEventBus, children }) {\n  const [user, setUser] = useState(undefined);\n\n  useImperativeHandle(contextRef, () => (user ? user.token : undefined));\n\n  useEffect(() => {\n    authErrorEventBus.listen((err) => {\n      console.log(err);\n      setUser(undefined);\n    });\n  }, [authErrorEventBus]);\n\n  useEffect(() => {\n    authService.me().then(setUser).catch(console.error);\n  }, [authService]);\n\n  const signUp = useCallback(\n    async (username, password, name, email, url) =>\n      authService\n        .signup(username, password, name, email, url)\n        .then((user) => setUser(user)),\n    [authService]\n  );\n\n  const logIn = useCallback(\n    async (username, password) =>\n      authService.login(username, password).then((user) => setUser(user)),\n    [authService]\n  );\n\n  const logout = useCallback(\n    async () => authService.logout().then(() => setUser(undefined)),\n    [authService]\n  );\n\n  const context = useMemo(\n    () => ({\n      user,\n      signUp,\n      logIn,\n      logout,\n    }),\n    [user, signUp, logIn, logout]\n  );\n\n  return (\n    <AuthContext.Provider value={context}>\n      {user ? (\n        children\n      ) : (\n        <div className='app'>\n          <Header />\n          <Login onSignUp={signUp} onLogin={logIn} />\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n}\n\nexport class AuthErrorEventBus {\n  listen(callback) {\n    this.callback = callback;\n  }\n  notify(error) {\n    this.callback(error);\n  }\n}\n\nexport default AuthContext;\nexport const fetchToken = () => contextRef.current;\nexport const useAuth = () => useContext(AuthContext);\n","import React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\n\nconst Tweets = memo(({ tweetService, username, addable }) => {\n  const [tweets, setTweets] = useState([]);\n  const [error, setError] = useState('');\n  const history = useHistory();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    tweetService\n      .getTweets(username)\n      .then((tweets) => setTweets([...tweets]))\n      .catch(onError);\n\n    const stopSync = tweetService.onSync((socket) => {\n      if (socket.command === 'create') {\n        onCreated(socket.data)\n      }\n       else if (socket.command === 'update') {\n        onUpdate(socket.data)\n      } else if (socket.command === 'delete') {\n        onDelete(socket.data)\n      }\n    })\n\n    return () => stopSync()\n  }, [tweetService, username, user]);\n\n  const onCreated = (tweet) => {\n    setTweets((tweets) => [tweet, ...tweets]);\n  };\n\n  const onDelete = (tweetId) => {\n    setTweets((tweets) => tweets.filter(item => item.id !== tweetId))\n  }\n\n  const onUpdate = (updated) => {\n    setTweets((tweets) => tweets.map((item) => (item.id === updated.id ? updated : item)))\n  }\n\n  const onUsernameClick = (tweet) => history.push(`/${tweet.username}`);\n\n  const onError = (error) => {\n    setError(error.toString());\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  return (\n    <>\n      {addable && (\n        <NewTweetForm\n          tweetService={tweetService}\n          onError={onError}\n          onCreated={onCreated}\n          user = {user}\n        />\n      )}\n      {error && <Banner text={error} isAlert={true} transient={true} />}\n      {tweets.length === 0 && <p className='tweets-empty'>No Tweets Yet</p>}\n      <ul className='tweets'>\n        {tweets.map((tweet) => (\n          <TweetCard\n            key={tweet.id}\n            tweet={tweet}\n            owner={tweet.username === user.username}\n            tweetService={tweetService}\n            onUsernameClick={onUsernameClick}\n          />\n        ))}\n      </ul>\n    </>\n  );\n});\nexport default Tweets;\n","import React from 'react';\nimport Tweets from '../components/Tweets';\n\nconst AllTweets = ({ tweetService }) => (\n  <Tweets tweetService={tweetService} addable={true} />\n);\n\nexport default AllTweets;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Tweets from '../components/Tweets';\n\nconst MyTweets = ({ tweetService }) => {\n  const { username } = useParams();\n  return (\n    <Tweets tweetService={tweetService} username={username} addable={false} />\n  );\n};\n\nexport default MyTweets;\n","import { Switch, Route, useHistory } from 'react-router-dom';\nimport Header from './components/Header';\nimport AllTweets from './pages/AllTweets';\nimport MyTweets from './pages/MyTweets';\nimport { useAuth } from './context/AuthContext';\n\nfunction App({ tweetService }) {\n  const history = useHistory();\n  const { user, logout } = useAuth();\n\n  const onAllTweets = () => {\n    history.push('/');\n  };\n\n  const onMyTweets = () => {\n    history.push(`/${user.username}`);\n  };\n\n  const onLogout = () => {\n    if (window.confirm('Do you want to log out?')) {\n      logout();\n      history.push('/');\n    }\n  };\n\n  return (\n    <div className='app'>\n      <Header\n        username={user.username}\n        onLogout={onLogout}\n        onAllTweets={onAllTweets}\n        onMyTweets={onMyTweets}\n      />\n      <Switch>\n        (\n        <>\n          <Route exact path='/'>\n            <AllTweets tweetService={tweetService} />\n          </Route>\n          <Route exact path='/:username'>\n            <MyTweets tweetService={tweetService} />\n          </Route>\n        </>\n        )\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","export default class AuthService {\n  constructor(http, tokenStorage) {\n    this.http = http\n    this.tokenStorage = tokenStorage\n  }\n\n  async signup(username, password, name, email, url) {\n    const data = await this.http.fetch('/auth/signup', {\n      method:'POST',\n      body:JSON.stringify(\n          {\n            username,\n            password,\n            name,\n            email,\n            url\n          }\n        )\n    })\n    this.tokenStorage.saveToken(data.token)\n    return data\n  }\n  \n  async login(username, password) {\n    const data = await this.http.fetch('/auth/login', {\n      method:'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    })\n\n    this.tokenStorage.saveToken(data.token)\n    return data\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken()\n    return this.http.fetch('/auth/me', {\n      method:'GET',\n      headers:{ Authorization: `Bearer ${token}`}\n    })\n  }\n\n  async logout() {\n    this.tokenStorage.clearToken()\n  }\n\n}\n","export default class TweetService {\n\n  constructor (http, tokenStorage, socket) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n    this.socket = socket;\n  }\n\n  async getTweets(username) {\n    const query = username ? `/?username=${username}` : ''\n    return this.http.fetch(`/tweets${query}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    })\n  }\n\n  async postTweet(text, userId) {\n    const tweet = {\n      userId,\n      text,\n    }\n    return this.http.fetch(`/tweets`, {\n      method: 'POST',\n      body: JSON.stringify(tweet),\n      headers: this.getHeaders()\n    })\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    })\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: 'PUT',\n      body: JSON.stringify({text}),\n      headers: this.getHeaders()\n    })\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken()\n    return {\n      Authorization: `Bearer ${token}`\n    }\n  }\n\n  onSync(callback) {\n    return this.socket.onSync('tweets', callback)\n  }\n}\n","export default class HttpClient {\n    constructor (baseURL, authErrorEventBus) {\n        this.baseURL = baseURL\n        this.authErrorEventBus = authErrorEventBus\n    }\n\n    async fetch (url, options) {\n        const response = await fetch(`${this.baseURL}${url}`, {\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers,\n            }\n        })\n        let data;\n        try {\n            data = await response.json()\n        } catch (error) {\n            console.log('ERROR', error)\n        }\n\n        if (response.status > 299 || response.status < 200) {\n            const message = \n                data && data.message ? data.message : 'somethine went wrong'\n            const error = new Error(message)\n            if (response.status === 401) {\n                this.authErrorEventBus.notify(error)\n                return\n            }\n            throw error\n        }\n\n        return data\n    }\n}\n\n  ","const TOKEN = 'token'\n\nexport default class TokenStorage {\n    getToken () {\n        return localStorage.getItem(TOKEN)\n    }\n\n    saveToken (token) {\n        localStorage.setItem(TOKEN, token)\n    }\n\n    clearToken () {\n        localStorage.clear(TOKEN)\n    }\n}","import socket from 'socket.io-client'\n\nexport default class Socket {\n    constructor(baseURL, getAccessToken) {\n        this.io = socket(baseURL, {\n            // auth: (callback) => callback({token:getAccessToken()})\n            auth:{token:getAccessToken()}\n        })\n    \n        this.io.on('connect_error', (error) => {\n            if (error) {\n                console.log('Socket Error', error.message)\n            }\n        })\n    }\n\n    onSync(event, callback) {\n        if (!this.io.connected) {\n            this.io.connect()\n        }\n        this.io.on(event, (message) => {\n            callback(message)\n        })\n\n        return () => this.io.off(event)\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AuthService from './service/auth';\nimport TweetService from './service/tweet';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport { AuthErrorEventBus } from './context/AuthContext';\nimport HttpClient from './network/http.js';\nimport TokenStorage from './db/token.js';\nimport Socket from './network/socket.js';\n\nconst baseURL=process.env.REACT_APP_BASE_URL;\nconst authErrorEventBus = new AuthErrorEventBus();\nconst tokenStorage = new TokenStorage()\nconst httpClient = new HttpClient(baseURL, authErrorEventBus)\nconst socketClient = new Socket(baseURL, () => tokenStorage.getToken())\nconst authService = new AuthService(httpClient, tokenStorage);\nconst tweetService = new TweetService(httpClient, tokenStorage, socketClient);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <AuthProvider\n        authService={authService}\n        authErrorEventBus={authErrorEventBus}\n      >\n        <App tweetService={tweetService} />\n      </AuthProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}